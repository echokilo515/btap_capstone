import requests
import time
from datetime import datetime, timedelta
import os

CURRENT_TIME = datetime.now().strftime("%Y%m%d_%H%M%S") 
API_KEY = "8055d92f789dfd0d2c74771b465285bf8fcfadbde85197e474afd6b1d7ef1b01"
TEST_HASH_PATH = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/hashes2investigate/test_hash.txt"
URL = "https://www.virustotal.com/api/v3/files"
TOTAL_FILES = 0
FLAGGED_FILES = 0

# TEST SCRIPT SCANS A SINGLE BAD HASH AND OUTPUTS TEXT TILE INTO TEST REPORTS FOLDER

file_output_directory = "C:/Users/echok/onedrive/desktop/btap_capstone/test_reports"
# ENSURE THE DIRECTORY EXISTS
os.makedirs(file_output_directory, exist_ok=True)
output_file_name = f"virus_total_report_{CURRENT_TIME}.txt"
output_file_path = os.path.join(file_output_directory, output_file_name)

print("Starting program...\n")

# RECORD START TIME
start_time = datetime.now()

# OPEN SCAN FILE IN READ MODE
with open(TEST_HASH_PATH, "r") as file:
    contents = file.readlines()
    print("Beginning malware scan...\n")

# GET HEADER TO VIRUSTOTAL.COM
headers = {"accept": "application/json", "x-apikey": API_KEY}

# OPEN OUTPUT FILE IN WRITE MODE
with open(output_file_path, "w") as output_file: 
    output_file.write(f"Start time: {start_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
    
    # ITERATE THROUGH EACH HASH IN THE FILE
    for line in contents:
        TOTAL_FILES += 1
        hash_value = line.strip()
        # GET REQUEST TO VIRUSTOTAL W/ HASH
        response = requests.get(
            f"https://www.virustotal.com/api/v3/files/{hash_value}", headers=headers
        )

        # PRINT RESPONSE
        if response.status_code == 200:
            report = response.json()
            FLAGGED_FILES += 1
            output_file.write(f"Flagged hash: {hash_value}\n\n")

            if 'data' in report:
                # GET REPORT DATA
                attributes = report['data'].get('attributes', {})
                hash_id = report['data'].get('id', {})
                file_type = attributes.get('type_description', 'Unknown type')
                file_size = attributes.get('size', 'Unknown size')
                type_tags = attributes.get('type_tags', 'Unknown type tag')
                names = attributes.get('names', ['Unknown name'])
                # WRITE ATTRIBUTES TO OUTPUT FILE
                output_file.write(f"File Type: {file_type}\n")
                output_file.write(f"File Size: {file_size}\n")
                output_file.write(f"Types: {type_tags}\n")
                output_file.write(f"Known Names: {', '.join(names)}\n")

                # GET DETECTION INFORMATION
                last_analysis_stats = attributes.get('last_analysis_stats', {})
                malicious_count = last_analysis_stats.get('malicious', 0)
                total_scanners = sum(last_analysis_stats.values())
                output_file.write(f"Detection Ratio: {malicious_count}/{total_scanners}\n")

            # VIRUSTOTAL REPORT URL
            output_file.write(f"For more information, visit https://virustotal.com/gui/file/{hash_id}\n\n")

            print(f"Report for hash {hash_value} written to file.\n")
            
        else:
            error_message = (
                f"No malicious signatures detected for {hash_value}\n"
            )
            print(error_message)
    
    # PRINT COUNT TOTALS 
    output_file.write(f"Total scanned hashes: {TOTAL_FILES}\n")
    output_file.write(f"Total flagged hashes: {FLAGGED_FILES}\n")

    # RECORD END TIME
    end_time = datetime.now()
    elapsed_time = end_time - start_time 
    output_file.write(f"\nEnd time: {end_time.strftime('%Y-%m-%d %H:%M:%S')}\n")
    output_file.write(f"\nScan time: {str(elapsed_time)}\n")
    output_file.write("\n")

# PRINT TOTALS TO CONSOLE
print(f"Complete! Report saved to {output_file_path}")
print(f"Total scanned hashes: {TOTAL_FILES}")
print(f"Total flagged hashes: {FLAGGED_FILES}")
print(f"Scan duration: {elapsed_time}")

