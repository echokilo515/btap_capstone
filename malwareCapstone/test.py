import requests
import time

API_KEY = "8055d92f789dfd0d2c74771b465285bf8fcfadbde85197e474afd6b1d7ef1b01"
HASH_LIST_PATH = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/hashes2investigate/test_hashes2investigate.txt"
URL = "https://www.virustotal.com/api/v3/files"
###
delay_seconds = 20
total_files = 0
flagged_files = 0
#REPLACE W/ HASH FILE AFTER TESTING!!!
test_hash = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/hashes2investigate/test_hash.txt"
bad_hashes = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/bad_hashes.txt"


print("Starting program...\n")

# Open the file in read mode
with open(test_hash, "r") as file:
    # Read all lines of the file
    contents = file.readlines()
    print("Found a text file...\n")

# GET header to virustotal.com
headers = {"accept": "application/json", "x-apikey": API_KEY}

# Open the output file in write mode
with open("virus_total_report.txt", "w") as output_file:
    # Iterate through each hash in the file
    for line in contents:
        total_files += 1
        hash_value = line.strip()
        # Make a GET request to VirusTotal to check the hash
        response = requests.get(
            f"https://www.virustotal.com/api/v3/files/{hash_value}", headers=headers
        )

        # Print the response
        if response.status_code == 200:
            report = response.json()
            output_file.write(f"Report for hash {hash_value}:\n")
            output_file.write(f"{report}\n\n")
            print(f"Report for hash {hash_value} written to file.")
            flagged_files += 1
        else:
            error_message = (
                f"No maliscious signatures detected for {hash_value}: {response.text}\n"
            )

            # outputs error message to file. omit if only flagged alerts are relevant
            # error_message = f"No maliscious signatures detected for {hash_value}\n"
            # output_file.write(error_message)
            print(error_message)

        # Wait for 60 seconds before making the next request
        print(f"Waiting for {delay_seconds} seconds before the next request...\n")
        time.sleep(delay_seconds)
    
    # Write totals at the bottom of the output file 
    output_file.write(f"Total scanned hashes: {total_files}\n")
    output_file.write(f"Total flagged hashes: {flagged_files}\n")

# total number of hashes flagged by virustotal.com
print(f"Total scanned hashes: {total_files}")
print(f"Total flagged hashes: {flagged_files}")
print("Complete! Report saved to virus_total_report.txt")
