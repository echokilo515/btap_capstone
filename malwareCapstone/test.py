import requests
import time
from datetime import datetime
import os

API_KEY = "8055d92f789dfd0d2c74771b465285bf8fcfadbde85197e474afd6b1d7ef1b01"
#HASH_LIST_PATH = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/hashes2investigate/hashes2investigate.txt"

HASH_LIST_PATH = "C:/Users/echok/OneDrive/Desktop/btap_capstone/malwareCapstone/hashes2investigate/test_hash.txt"

URL = "https://www.virustotal.com/api/v3/files"
DELAY_SECONDS = 20

total_files = 0
flagged_files = 0

# Get current date and time 
current_time = datetime.now().strftime("%Y%m%d_%H%M%S") 

# Directory to save the output file 
output_directory = "C:/Users/echok/onedrive/desktop/btap_capstone/"
# Ensure the directory exists 
os.makedirs(output_directory, exist_ok=True)
output_file_name = f"virus_total_report_{current_time}.txt"
output_file_path = os.path.join(output_directory, output_file_name)

print("Starting program...\n")

# Open the file in read mode
with open(HASH_LIST_PATH, "r") as file:
    # Read all lines of the file
    contents = file.readlines()
    print("Found a text file...\n")

# GET header to virustotal.com
headers = {"accept": "application/json", "x-apikey": API_KEY}

# Open the output file in write mode
with open(output_file_path, "w") as output_file:
    # Write the timestamp at the beginning of the output file 
    start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S") 
    output_file.write(f"Start time: {start_time}\n\n")
    
    # Iterate through each hash in the file
    for line in contents:
        total_files += 1
        hash_value = line.strip()
        # Make a GET request to VirusTotal to check the hash
        response = requests.get(
            f"https://www.virustotal.com/api/v3/files/{hash_value}", headers=headers
        )

        # Print the response
        if response.status_code == 200:
            report = response.json()
            flagged_files += 1
            output_file.write(f"Flagged hash: {hash_value}\n\n")

            if 'data' in report:

            # Get basic file information
                attributes = report['data'].get('attributes', {})
                hash_id = report['data'].get('id', {})
                # Get file type and names
                file_type = attributes.get('type_description', 'Unknown type')
                file_size = attributes.get('size', 'Unknown size')
                type_tags = attributes.get('type_tags', 'Unknown type tag')
                names = attributes.get('names', ['Unknown name'])
                output_file.write(f"File Type: {file_type}\n")
                output_file.write(f"File Size: {file_size}\n")
                output_file.write(f"Types: {type_tags}\n")
                output_file.write(f"Known Names: {', '.join(names)}\n")


                # Get detection information
                last_analysis_stats = attributes.get('last_analysis_stats', {})
                malicious_count = last_analysis_stats.get('malicious', 0)
                total_scanners = sum(last_analysis_stats.values())
                output_file.write(f"Detection Ratio: {malicious_count}/{total_scanners}\n")

            #Provide Virustotal analysis link
            output_file.write(f"For more information, visit https://virustotal.com/gui/file/{hash_id}\n\n")

            #output_file.write(f"{report}\n\n")
            #output_file.write(f"For more information, visit https://virustotal.com/gui/file/{report.data.id}\n\n")
            print(f"Report for hash {hash_value} written to file.\n")
            
        else:
            error_message = (
                f"No maliscious signatures detected for {hash_value}\n"
            )

            # outputs error message to console. these messages are omitted from the output file as they are not relevant.
            print(error_message)

        # Wait for 60 seconds before making the next request
        print(f"*** Waiting for {DELAY_SECONDS} seconds before the next request... ***\n")
        time.sleep(DELAY_SECONDS)
    
    # Write totals at the bottom of the output file 
    output_file.write(f"Total scanned hashes: {total_files}\n")
    output_file.write(f"Total flagged hashes: {flagged_files}\n")

    # Write end timestamp at the end of the output file 
    end_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S") 
    output_file.write(f"\nEnd time: {end_time}\n")
    output_file.write("\n")

# total number of hashes flagged by virustotal.com
print(f"Total scanned hashes: {total_files}")
print(f"Total flagged hashes: {flagged_files}")
print(f"Complete! Report saved to {output_file_path}")
